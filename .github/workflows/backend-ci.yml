name: Backend CI/CD

on:
  push:
    paths: 
      - 'backend/**'
  pull_request:
    paths:
      - 'backend/**'

jobs:
  test:
    runs-on: ubuntu-latest
    environment: testing
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests (if you have them)
      run: npm test || echo "No tests configured yet"
      env:
        NODE_ENV: test
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
    
    - name: Start server for health check
      run: |
        npm start &
        SERVER_PID=$!
        sleep 10
        
        # Health check
        if curl -f http://localhost:3009/api/health; then
          echo "✅ Server health check passed"
        else
          echo "❌ Server health check failed"
          kill $SERVER_PID || true
          exit 1
        fi
        
        # Clean shutdown
        kill $SERVER_PID || true
        sleep 2
      env:
        NODE_ENV: test
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        PORT: 3009
    
    - name: Build Docker image
      run: docker build -t studysync-backend:${{ github.sha }} .
    
    - name: Test Docker container
      run: |
        # Start container
        docker run -d -p 3010:3009 \
          -e NODE_ENV=test \
          -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
          -e GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}" \
          -e GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}" \
          -e PORT=3009 \
          --name test-container studysync-backend:${{ github.sha }}
        
        # Wait for container to start
        sleep 15
        
        # Health check
        if curl -f http://localhost:3010/api/health; then
          echo "✅ Docker container health check passed"
        else
          echo "❌ Docker container health check failed"
          docker logs test-container
          exit 1
        fi
        
        # Cleanup
        docker stop test-container
        docker rm test-container
    
    - name: Clean up Docker image
      run: docker rmi studysync-backend:${{ github.sha }} || true